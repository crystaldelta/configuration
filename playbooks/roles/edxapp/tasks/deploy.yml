---
- name: create ssh dir for the content repos key
  file:
    path: "~/.ssh"
    state: "directory"
    mode: "0700"
  become_user: "{{ common_web_user }}"

- name: install ssh key for the content repos
  copy:
    content: "{{ GITRELOAD_GIT_IDENTITY }}"
    dest: "~/.ssh/id_rsa"
    mode: "0600"
  become_user: "{{ common_web_user }}"

- include: course_pull.yml
  when: GITRELOAD_COURSE_CHECKOUT|bool
  tags: course_pull

- name: install gitreload
  pip:
    name: "git+{{ gitreload_repo }}@{{ gitreload_version }}#egg=gitreload"
    virtualenv: "{{ gitreload_venv }}"
    extra_args: "--exists-action w"
  become_user: "{{ gitreload_user }}"
  notify: restart gitreload

- name: copy configuration
  template:
    src: "edx/app/gitreload/gr.env.json.j2"
    dest: "{{ gitreload_dir }}/gr.env.json"
  become_user: "{{ gitreload_user }}"
  notify: restart gitreload

- name: "add gunicorn configuration file"
  template:
    src: "edx/app/gitreload/gitreload_gunicorn.py.j2"
    dest: "{{ gitreload_dir }}/gitreload_gunicorn.py"
  become_user: "{{ gitreload_user }}"
  notify: restart gitreload

- name: "writing supervisor script"
  template:
    src: "edx/app/supervisor/conf.available.d/gitreload.conf.j2"
    dest: "{{ supervisor_available_dir }}/gitreload.conf"
    owner: "{{ supervisor_user }}"
    group: "{{ common_web_user }}"
    mode: "0644"

- name: "enable supervisor script"
  file:
    src: "{{ supervisor_available_dir }}/gitreload.conf"
    dest: "{{ supervisor_cfg_dir }}/gitreload.conf"
    owner: "{{ supervisor_user }}"
    group: "{{ common_web_user }}"
    mode: "0644"
    state: link
    force: "yes"
  when: not disable_edx_services

- name: update supervisor configuration
  shell: "{{ supervisor_ctl }} -c {{ supervisor_cfg }} update"
  register: supervisor_update
  changed_when: supervisor_update.stdout is defined and supervisor_update.stdout != ""
  when: not disable_edx_services

- name: ensure gitreload is started
  supervisorctl:
    name: gitreload
    supervisorctl_path: "{{ supervisor_ctl }}"
    config: "{{ supervisor_cfg }}"
    state: started
  when: not disable_edx_services

- name: create edxapp configuration dir
  file:
    path: "{{ EDXAPP_CFG_DIR }}"
    state: directory
    owner: "{{ edxapp_user }}"
    group: "{{ common_web_group }}"
  tags:
    - install
    - install:base

- name: copy the template to the desired location
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "{{ item.mode }}"
  loop:
    - { src: 'edxapp_env.j2', dest: '{{ edxapp_app_dir }}/edxapp_env', owner: '{{ edxapp_user }}', group: '{{ common_web_user }}', mode: '0644' }
    - { src: 'newrelic.ini.j2', dest: '{{ edxapp_app_dir }}/newrelic.ini', owner: '{{ edxapp_user }}', group: '{{ common_web_user }}', mode: '0644' }
    - { src: 'git_ssh.sh.j2', dest: '{{ edxapp_git_ssh }}', owner: '{{ edxapp_user }}', group: '{{ edxapp_user }}', mode: '0750' }
    - { src: 'boto.j2', dest: '{{ edxapp_app_dir }}/.boto', owner: '{{ edxapp_user }}', group: '{{ common_web_user }}', mode: '0644' }
  tags:
    - install
    - install:base

- name: checkout the edx-platform repository
  git:
    repo: "{{ edxapp_repo }}"
    dest: "{{ edxapp_app_dir }}"
    version: "{{ edxapp_branch }}"
    accept_hostkey: yes
    update: yes
    force: yes
    key_file: "{{ edxapp_git_ssh }}"
  become_user: "{{ edxapp_user }}"
  environment:
    GIT_SSH: "{{ edxapp_git_ssh }}"
  register: edxapp_platform_checkout
  tags:
    - install
    - install:code

- name: install python dependencies
  pip:
    requirements: "{{ edxapp_app_dir }}/requirements/edx/base.txt"
    virtualenv: "{{ edxapp_venv_dir }}"
    virtualenv_command: "virtualenv"
  become_user: "{{ edxapp_user }}"
  tags:
    - install
    - install:base

- name: install node dependencies
  npm:
    path: "{{ edxapp_app_dir }}"
    production: yes
  become_user: "{{ edxapp_user }}"
  tags:
    - install
    - install:base

- name: compile js and css assets
  shell: |
    . {{ edxapp_venv_dir }}/bin/activate
    cd {{ edxapp_app_dir }}
    make assets
  args:
    executable: /bin/bash
  become_user: "{{ edxapp_user }}"
  tags:
    - install
    - install:base

- name: migrate edxapp database
  shell: |
    . {{ edxapp_venv_dir }}/bin/activate
    cd {{ edxapp_app_dir }}
    ./manage.py lms migrate --noinput
  become_user: "{{ edxapp_user }}"
  tags:
    - install
    - install:base

- name: collect static files
  shell: |
    . {{ edxapp_venv_dir }}/bin/activate
    cd {{ edxapp_app_dir }}
    ./manage.py lms collectstatic --noinput
  become_user: "{{ edxapp_user }}"
  tags:
    - install
    - install:base

- name: restart edx services
  systemd:
    name: "{{ item }}"
    state: restarted
  loop:
    - edxapp
    - edxapp-celery-worker
    - edxapp-celery-beat
  when: not disable_edx_services
  tags:
    - install
    - install:base
